@model RentCartWeb.Core.Models.Reservations

@{
    ViewBag.Title = "Create";
}
<script src="~/Scripts/jquery-1.12.4.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<h2>Register new Cart Rent</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4></h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.CarID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CarID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CarID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartDate, new { id = "StartDate", htmlAttributes = new { @class = "datepicker" } })
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndDate, new { id = "EndDate", htmlAttributes = new { @class = "datepicker" } })
                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
@*<script type="text/javascript">
        $(document).ready(function () {
            $('#StartDate').datepicker({
                onSelect: function (selected) {
                    var dt = new Date(selected);
                    dt.setDate(dt.getDate() + 1);
                    $("#EndDate").datepicker("option", "minDate", dt);
                }
            });
            $("#EndDate").datepicker({
                numberOfMonths: 2,
                onSelect: function (selected) {
                    var dt = new Date(selected);
                    dt.setDate(dt.getDate() - 1);
                    $("#StartDate").datepicker("option", "maxDate", dt);
                }
            });
        });
    </script>*@
<script src="https://cdn.jsdelivr.net/momentjs/2.12.0/moment.min.js"></script>

<script type="text/javascript">
    $.validator.unobtrusive.adapters.add('restrictbackdates', ['mindate'], function (options) {
        options.rules['restrictbackdates'] = { mindate: options.params.mindate };
        options.messages['restrictbackdates'] = options.message;
    });

    $.validator.addMethod("restrictbackdates", function (value, element, param) {
        var date = new Date(value);
        var minDate = new Date(param.mindate);
        return date >= minDate;
    });

    $.validator.unobtrusive.adapters.add('isgreater', ['otherproperty'], function (options) {
        options.rules['isgreater'] = { otherproperty: options.params.otherproperty };
        options.messages['isgreater'] = options.message;
    });

    $.validator.addMethod("isgreater", function (value, element, param) {
        var otherProp = $('#' + param.otherproperty);
        if (otherProp.val() != '') {
            var StartDate = new Date(moment(otherProp.val(), 'MM/DD/YYYY'));

            var EndDate = new Date(value);
            if (StartDate != '') {
                return EndDate >= StartDate;
            }
        }
        return true;
    });
</script>

}


